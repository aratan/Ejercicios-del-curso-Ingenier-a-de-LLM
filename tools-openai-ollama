import os
import json
from openai import OpenAI
import gradio as gr

# Inicializar el cliente de OpenAI
MODEL='qwen2.5'
openai = OpenAI(base_url='http://localhost:11434/v1', api_key='ollama')

system_message = "Eres un asistente útil para una aerolínea llamada FlightAI. "
system_message += "Da respuestas breves y corteses, de no más de una oración. "
system_message += "Sé siempre preciso. Si no sabes la respuesta, dilo."

ticket_prices = {"london": "$799", "paris": "$899", "tokyo": "$1400", "berlin": "$499"}

def get_ticket_price(destination_city):
    print(f"Tool get_ticket_price called for {destination_city}")
    return ticket_prices.get(destination_city.lower(), "Unknown")

book_function = {
    "type": "function",
    "function": {
        "name": "book_ticket",
        "description": "Confirma la reserva de un billete a la ciudad de destino.",
        "parameters": {
            "type": "object",
            "properties": {
                "destination_city": {
                    "type": "string",
                    "description": "La ciudad a la que el cliente quiere reservar el billete.",
                },
            },
            "required": ["destination_city"],
        },
    }
}

price_function = {
    "type": "function",
    "function": {
        "name": "get_ticket_price",
        "description": "Obtener el precio de un billete de ida y vuelta a la ciudad de destino.",
        "parameters": {
            "type": "object",
            "properties": {
                "destination_city": {
                    "type": "string",
                    "description": "La ciudad a la que el cliente quiere viajar.",
                },
            },
            "required": ["destination_city"],
        },
    }
}

tools = [price_function, book_function]

def chat(message, history):
    messages = [{"role": "system", "content": system_message}]
    for human, assistant in history:
        messages.append({"role": "user", "content": human})
        messages.append({"role": "assistant", "content": assistant})
    messages.append({"role": "user", "content": message})
    response = openai.chat.completions.create(model=MODEL, messages=messages, tools=tools, tool_choice="auto")

    if response.choices[0].finish_reason == "tool_calls":
        tool_calls = response.choices[0].message.tool_calls
        for tool_call in tool_calls:
            function_name = tool_call.function.name
            arguments = json.loads(tool_call.function.arguments)

            if function_name == "get_ticket_price":
                city = arguments.get('destination_city')
                tool_response = get_ticket_price(city)
            elif function_name == "book_ticket":
                city = arguments.get('destination_city')
                # En una aplicación real, aquí iría la lógica para reservar el billete.
                tool_response = f"El billete a {city} ha sido reservado. Gracias."
            else:
                tool_response = f"No se reconoce la función: {function_name}"

            messages.append(response.choices[0].message)
            messages.append({
                "tool_call_id": tool_call.id,
                "role": "tool",
                "name": function_name,
                "content": tool_response,
            })
        response = openai.chat.completions.create(model=MODEL, messages=messages)

    return response.choices[0].message.content

gr.ChatInterface(fn=chat).launch()
