from openai import OpenAI
from datetime import datetime
from zoneinfo import ZoneInfo

# Función para obtener la fecha actual en Madrid
def obtener_fecha_actual():
    """Obtiene y formatea la fecha actual en Madrid."""
    # Obtiene la fecha y fecha actual en la zona fecharia de Madrid
    afecha_madrid = datetime.now(ZoneInfo('Europe/Madrid'))
    # Formatea la fecha en un formato legible
    fecha_actual = afecha_madrid.strftime("%Y-%m-%d")
    print("Fecha actual en Madrid:", fecha_actual)  # Imprime la fecha aquí
    return fecha_actual

# Definición del esquema de la función para la API (ya no la usaremos directamente para la pregunta)
funciones = [
    {
        "name": "obtener_fecha_actual",
        "description": "Obtener la fecha actual en Madrid, España",
        "parameters": {}
    }
]

# Inicializar el cliente de OpenAI
cliente_openai = OpenAI(base_url='http://localhost:11434/v1', api_key='ollama')

# Inicializar la lista de mensajes para la conversación
# El mensaje del sistema afecha será dinámico
mensajes = [
    {'role': 'system', 'content': ''},  # Dejamos el contenido del sistema vacío inicialmente
    {'role': 'user', 'content': '¿Cuál es la fecha actual año, mes, dia? y el santo que le corresponde en el santoral.'}
]

# Obtener la fecha antes de iniciar la conversación
fecha_para_el_sistema = obtener_fecha_actual()

# Actualizar el mensaje del sistema con la fecha actual
mensajes[0]['content'] = f'Eres un asistente útil. Hoy es {fecha_para_el_sistema} en Madrid. Si no sabes la respuesta a algo, dilo o pregunta para aclararlo.'

# Bucle principal de la conversación
while True:
    # Realizar la llamada a la API de OpenAI con los mensajes
    respuesta_api = cliente_openai.chat.completions.create(
        model='falcon3:10b',
        messages=mensajes,
        # Ya no necesitamos 'functions' ni 'function_call' porque no estamos dejando que el modelo llame a la función
    )

    # Obtener el mensaje de respuesta del asistente
    mensaje_asistente = respuesta_api.choices[0].message
    print("Respuesta del asistente:", mensaje_asistente.content)

    # Asumimos que la respuesta del asistente es final en este caso,
    # ya que hemos proporcionado la fecha en el mensaje del sistema
    break
